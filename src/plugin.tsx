// plugin.tsx
import React, { useState, useEffect, useCallback } from "react";
import { createRoot } from "react-dom/client";
import { motion } from "framer-motion";
import { curves, Curve, SpringCurve, BezierCurve } from "./curves.js";
import "./plugin.css"; // Ensure Tailwind CSS is included in your build process
import AnimationPreview from "./AnimationPreview.js";
import { Tabs, Text } from "figma-kit";

const App = () => {
  const [selectedCurve, setSelectedCurve] = useState<Curve>(curves[0]);
  const [duration, setDuration] = useState<number>(200);
  const [selectedTrigger, setSelectedTrigger] = useState<string>("Click");
  const [startFrameData, setStartFrameData] = useState<{
    src: string | null;
    name: string;
  }>({ src: null, name: "" });
  const [endFrameData, setEndFrameData] = useState<{
    src: string | null;
    name: string;
  }>({ src: null, name: "" });
  const [isCreateButtonDisabled, setIsCreateButtonDisabled] = useState<boolean>(true);

  const triggerOptions = [
    {
      label: "Click",
      icon: (
        <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M9.321 5.53199C9.44341 5.4813 9.58093 5.48126 9.70337 5.53189C9.8258 5.58251 9.92314 5.67966 9.974 5.80199L10.751 7.67799C10.853 7.92299 10.712 8.20199 10.466 8.30399C10.22 8.40599 9.929 8.30599 9.827 8.05999L9.051 6.18599C9.02575 6.12533 9.0127 6.06028 9.0126 5.99457C9.0125 5.92885 9.02536 5.86377 9.05044 5.80303C9.07551 5.74229 9.11231 5.68708 9.15874 5.64058C9.20517 5.59407 9.2603 5.55717 9.321 5.53199ZM8.061 9.82699L6.186 9.04999C6.06347 8.99921 5.92578 8.99917 5.80323 9.0499C5.68067 9.10063 5.58329 9.19796 5.5325 9.32049C5.48171 9.44302 5.48168 9.58071 5.53241 9.70327C5.58314 9.82582 5.68047 9.9232 5.803 9.97399L7.678 10.751C7.924 10.852 8.202 10.711 8.304 10.466C8.407 10.22 8.307 9.92999 8.061 9.82699ZM7.678 13.248L5.803 14.024C5.68047 14.0748 5.58314 14.1722 5.53241 14.2947C5.48168 14.4173 5.48171 14.555 5.5325 14.6775C5.58329 14.8 5.68067 14.8974 5.80323 14.9481C5.92578 14.9988 6.06347 14.9988 6.186 14.948L8.061 14.171C8.307 14.069 8.407 13.778 8.304 13.532C8.201 13.286 7.924 13.146 7.678 13.248ZM9.827 15.938L9.05 17.812C9.02485 17.8727 9.0119 17.9377 9.01188 18.0034C9.01187 18.069 9.02479 18.1341 9.04991 18.1948C9.07502 18.2555 9.11185 18.3106 9.15828 18.357C9.20471 18.4035 9.25983 18.4403 9.3205 18.4655C9.38117 18.4906 9.4462 18.5036 9.51188 18.5036C9.57755 18.5036 9.64259 18.4907 9.70327 18.4656C9.76396 18.4405 9.8191 18.4036 9.86555 18.3572C9.912 18.3108 9.94885 18.2557 9.974 18.195L10.751 16.32C10.853 16.075 10.711 15.796 10.466 15.694C10.221 15.592 9.929 15.692 9.827 15.938ZM16.322 10.75L18.196 9.97299C18.3163 9.92081 18.4112 9.82348 18.4605 9.70195C18.5097 9.58043 18.5092 9.44444 18.4591 9.32327C18.409 9.20211 18.3133 9.10547 18.1926 9.05417C18.072 9.00287 17.936 9.00101 17.814 9.04899L15.939 9.82599C15.693 9.92699 15.593 10.219 15.695 10.465C15.797 10.711 16.076 10.851 16.322 10.75ZM14.172 8.05999L14.949 6.18499C14.9998 6.06246 14.9998 5.92478 14.9491 5.80222C14.8984 5.67967 14.801 5.58228 14.6785 5.53149C14.556 5.4807 14.4183 5.48067 14.2957 5.5314C14.1732 5.58213 14.0758 5.67946 14.025 5.80199L13.249 7.67699C13.147 7.92199 13.288 8.20099 13.533 8.30299C13.779 8.40499 14.071 8.30499 14.173 8.05899M12.353 11.061C12.1731 10.9934 11.9776 10.979 11.7898 11.0196C11.6019 11.0602 11.4298 11.154 11.2939 11.2899C11.158 11.4258 11.0642 11.5979 11.0236 11.7858C10.983 11.9736 10.9974 12.1691 11.065 12.349L13.315 18.349C13.39 18.5485 13.5269 18.7188 13.7055 18.8351C13.8842 18.9513 14.0953 19.0075 14.3081 18.9953C14.5209 18.9832 14.7242 18.9033 14.8885 18.7674C15.0527 18.6316 15.1692 18.4468 15.221 18.24L15.826 15.822L18.244 15.218C18.4511 15.1663 18.6362 15.0498 18.7723 14.8854C18.9084 14.721 18.9883 14.5174 19.0004 14.3043C19.0124 14.0912 18.956 13.8798 18.8394 13.7011C18.7227 13.5224 18.5519 13.3857 18.352 13.311L12.353 11.061ZM16.293 14.675L15 15L14.677 16.29L14.25 18L13.632 16.35L12.466 13.242L12 12L13.243 12.466L16.351 13.631L18 14.25L16.293 14.675Z"
            fill="white"
          />
        </svg>
      ),
    },
    {
      label: "Drag",
      icon: (
        <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M17 9.5C17 9.63261 17.0527 9.75979 17.1464 9.85355C17.2402 9.94732 17.3674 10 17.5 10C17.6326 10 17.7598 9.94732 17.8536 9.85355C17.9473 9.75979 18 9.63261 18 9.5V6.5C18 6.36739 17.9473 6.24021 17.8536 6.14645C17.7598 6.05268 17.6326 6 17.5 6H14.5C14.3674 6 14.2402 6.05268 14.1464 6.14645C14.0527 6.24021 14 6.36739 14 6.5C14 6.63261 14.0527 6.75979 14.1464 6.85355C14.2402 6.94732 14.3674 7 14.5 7H16.293L14.146 9.146C14.0521 9.23989 13.9994 9.36722 13.9994 9.5C13.9994 9.63278 14.0521 9.76011 14.146 9.854C14.2399 9.94789 14.3672 10.0006 14.5 10.0006C14.6328 10.0006 14.7601 9.94789 14.854 9.854L17 7.707V9.5ZM7 14.5C7 14.3674 6.94732 14.2402 6.85355 14.1464C6.75979 14.0527 6.63261 14 6.5 14C6.36739 14 6.24021 14.0527 6.14645 14.1464C6.05268 14.2402 6 14.3674 6 14.5V17.5C6 17.6326 6.05268 17.7598 6.14645 17.8536C6.24021 17.9473 6.36739 18 6.5 18H9.5C9.63261 18 9.75979 17.9473 9.85355 17.8536C9.94732 17.7598 10 17.6326 10 17.5C10 17.3674 9.94732 17.2402 9.85355 17.1464C9.75979 17.0527 9.63261 17 9.5 17H7.707L9.854 14.854C9.94789 14.7601 10.0006 14.6328 10.0006 14.5C10.0006 14.3672 9.94789 14.2399 9.854 14.146C9.76011 14.0521 9.63278 13.9994 9.5 13.9994C9.36722 13.9994 9.23989 14.0521 9.146 14.146L7 16.293V14.5ZM10 6.5C10 6.63261 9.94732 6.75979 9.85355 6.85355C9.75979 6.94732 9.63261 7 9.5 7H7.707L9.854 9.146C9.94789 9.23989 10.0006 9.36722 10.0006 9.5C10.0006 9.63278 9.94789 9.76011 9.854 9.854C9.76011 9.94789 9.63278 10.0006 9.5 10.0006C9.36722 10.0006 9.23989 9.94789 9.146 9.854L7 7.707V9.5C7 9.63261 6.94732 9.75979 6.85355 9.85355C6.75979 9.94732 6.63261 10 6.5 10C6.36739 10 6.24021 9.94732 6.14645 9.85355C6.05268 9.75979 6 9.63261 6 9.5V6.5C6 6.36739 6.05268 6.24021 6.14645 6.14645C6.24021 6.05268 6.36739 6 6.5 6H9.5C9.63261 6 9.75979 6.05268 9.85355 6.14645C9.94732 6.24021 10 6.36739 10 6.5ZM12.351 11.064C12.1713 10.9968 11.976 10.9827 11.7885 11.0233C11.601 11.064 11.4292 11.1578 11.2935 11.2935C11.1578 11.4292 11.064 11.601 11.0233 11.7885C10.9827 11.976 10.9968 12.1713 11.064 12.351L13.314 18.351C13.3889 18.5505 13.5257 18.7209 13.7043 18.8372C13.8828 18.9536 14.0939 19.0098 14.3067 18.9978C14.5195 18.9857 14.7229 18.906 14.8872 18.7702C15.0515 18.6344 15.1681 18.4497 15.22 18.243L15.825 15.825L18.243 15.22C18.4497 15.1681 18.6344 15.0515 18.7702 14.8872C18.906 14.7229 18.9857 14.5195 18.9978 14.3067C19.0098 14.0939 18.9536 13.8828 18.8372 13.7043C18.7209 13.5257 18.5505 13.3889 18.351 13.314L12.351 11.064ZM16.291 14.677L15 15L14.677 16.291L14.25 18L13.632 16.35L12.466 13.243L12 12L13.243 12.466L16.351 13.632L18 14.25L16.291 14.677Z"
            fill="white"
          />
        </svg>
      ),
    },
    {
      label: "Hover",
      icon: (
        <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M12 6C11.6022 6 11.2206 6.15804 10.9393 6.43934C10.658 6.72064 10.5 7.10218 10.5 7.5C10.5 7.89782 10.658 8.27936 10.9393 8.56066C11.2206 8.84196 11.6022 9 12 9C12.3978 9 12.7794 8.84196 13.0607 8.56066C13.342 8.27936 13.5 7.89782 13.5 7.5C13.5 7.10218 13.342 6.72064 13.0607 6.43934C12.7794 6.15804 12.3978 6 12 6ZM9.5 7.5C9.5 6.83696 9.76339 6.20107 10.2322 5.73223C10.7011 5.26339 11.337 5 12 5C12.663 5 13.2989 5.26339 13.7678 5.73223C14.2366 6.20107 14.5 6.83696 14.5 7.5C14.5 8.16304 14.2366 8.79893 13.7678 9.26777C13.2989 9.73661 12.663 10 12 10C11.337 10 10.7011 9.73661 10.2322 9.26777C9.76339 8.79893 9.5 8.16304 9.5 7.5ZM6 15.603V16C6 16.156 6.08 16.36 6.347 16.603C6.614 16.846 7.029 17.088 7.583 17.301C8.69 17.726 10.25 18 12 18C13.75 18 15.311 17.726 16.417 17.301C16.971 17.088 17.386 16.846 17.653 16.603C17.92 16.36 18 16.156 18 16V15.603C17.656 15.846 17.24 16.056 16.776 16.234C15.529 16.714 13.84 17 12 17C10.16 17 8.471 16.714 7.224 16.234C6.792 16.0739 6.381 15.862 6 15.603ZM6 14C6 14.156 6.08 14.36 6.347 14.603C6.614 14.846 7.029 15.088 7.583 15.301C8.69 15.726 10.25 16 12 16C13.75 16 15.311 15.726 16.417 15.301C16.971 15.088 17.386 14.846 17.653 14.603C17.92 14.36 18 14.156 18 14C18 13.844 17.92 13.64 17.653 13.397C17.386 13.154 16.971 12.912 16.417 12.699C15.31 12.274 13.75 12 12 12C10.25 12 8.689 12.274 7.583 12.699C7.029 12.912 6.614 13.154 6.347 13.397C6.08 13.64 6 13.844 6 14ZM5 14C5 13.466 5.284 13.012 5.674 12.657C6.064 12.302 6.603 12.005 7.224 11.766C8.471 11.286 10.16 11 12 11C13.84 11 15.529 11.286 16.776 11.766C17.397 12.005 17.935 12.302 18.326 12.657C18.716 13.012 19 13.466 19 14V16C19 16.535 18.716 16.988 18.326 17.343C17.936 17.698 17.397 17.995 16.776 18.234C15.529 18.714 13.84 19 12 19C10.16 19 8.471 18.714 7.224 18.234C6.603 17.995 6.065 17.698 5.674 17.343C5.284 16.988 5 16.535 5 16V14Z"
            fill="white"
          />
        </svg>
      ),
    },
    {
      label: "Press",
      icon: (
        <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M10.5 10.5C10.5 10.1022 10.658 9.72064 10.9393 9.43934C11.2206 9.15804 11.6022 9 12 9C12.3978 9 12.7794 9.15804 13.0607 9.43934C13.342 9.72064 13.5 10.1022 13.5 10.5C13.5 10.8978 13.342 11.2794 13.0607 11.5607C12.7794 11.842 12.3978 12 12 12C11.6022 12 11.2206 11.842 10.9393 11.5607C10.658 11.2794 10.5 10.8978 10.5 10.5ZM12 8C11.337 8 10.7011 8.26339 10.2322 8.73223C9.76339 9.20107 9.5 9.83696 9.5 10.5C9.5 11.163 9.76339 11.7989 10.2322 12.2678C10.7011 12.7366 11.337 13 12 13C12.663 13 13.2989 12.7366 13.7678 12.2678C14.2366 11.7989 14.5 11.163 14.5 10.5C14.5 9.83696 14.2366 9.20107 13.7678 8.73223C13.2989 8.26339 12.663 8 12 8ZM15.955 11.1C15.999 10.808 16.282 10.588 16.56 10.686L16.776 10.766C17.397 11.005 17.935 11.302 18.326 11.657C18.716 12.012 19 12.466 19 13C19 13.534 18.716 13.988 18.326 14.343C17.936 14.698 17.397 14.995 16.776 15.235C15.529 15.714 13.84 16 12 16C10.16 16 8.471 15.714 7.224 15.235C6.603 14.995 6.065 14.698 5.674 14.343C5.284 13.988 5 13.534 5 13C5 12.466 5.284 12.012 5.674 11.657C6.064 11.302 6.603 11.005 7.224 10.766L7.44 10.686C7.718 10.588 8 10.808 8.045 11.099C8.06319 11.2135 8.04102 11.3308 7.98228 11.4307C7.92354 11.5307 7.83189 11.6072 7.723 11.647L7.583 11.699C7.029 11.912 6.614 12.154 6.347 12.397C6.08 12.64 6 12.844 6 13C6 13.156 6.08 13.36 6.347 13.603C6.614 13.846 7.029 14.088 7.583 14.301C8.69 14.726 10.25 15 12 15C13.75 15 15.311 14.726 16.417 14.301C16.971 14.088 17.386 13.846 17.653 13.603C17.92 13.36 18 13.156 18 13C18 12.844 17.92 12.64 17.653 12.397C17.386 12.154 16.971 11.912 16.417 11.699L16.277 11.647C16.1681 11.6072 16.0765 11.5307 16.0177 11.4307C15.959 11.3308 15.9368 11.2135 15.955 11.099"
            fill="white"
          />
        </svg>
      ),
    },
    {
      label: "Key",
      icon: (
        <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M10.5 5C10.1022 5 9.72064 5.15804 9.43934 5.43934C9.15804 5.72064 9 6.10218 9 6.5V9H6.5C6.10218 9 5.72064 9.15804 5.43934 9.43934C5.15804 9.72064 5 10.1022 5 10.5V13.5C5 13.8978 5.15804 14.2794 5.43934 14.5607C5.72064 14.842 6.10218 15 6.5 15H9V17.5C9 17.8978 9.15804 18.2794 9.43934 18.5607C9.72064 18.842 10.1022 19 10.5 19H13.5C13.8978 19 14.2794 18.842 14.5607 18.5607C14.842 18.2794 15 17.8978 15 17.5V15H17.5C17.8978 15 18.2794 14.842 18.5607 14.5607C18.842 14.2794 19 13.8978 19 13.5V10.5C19 10.1022 18.842 9.72064 18.5607 9.43934C18.2794 9.15804 17.8978 9 17.5 9H15V6.5C15 6.10218 14.842 5.72064 14.5607 5.43934C14.2794 5.15804 13.8978 5 13.5 5H10.5ZM10 6.5V10H6.5C6.36739 10 6.24021 10.0527 6.14645 10.1464C6.05268 10.2402 6 10.3674 6 10.5V13.5C6 13.6326 6.05268 13.7598 6.14645 13.8536C6.24021 13.9473 6.36739 14 6.5 14H10V17.5C10 17.6326 10.0527 17.7598 10.1464 17.8536C10.2402 17.9473 10.3674 18 10.5 18H13.5C13.6326 18 13.7598 17.9473 13.8536 17.8536C13.9473 17.7598 14 17.6326 14 17.5V14H17.5C17.6326 14 17.7598 13.9473 17.8536 13.8536C17.9473 13.7598 18 13.6326 18 13.5V10.5C18 10.3674 17.9473 10.2402 17.8536 10.1464C17.7598 10.0527 17.6326 10 17.5 10H14V6.5C14 6.36739 13.9473 6.24021 13.8536 6.14645C13.7598 6.05268 13.6326 6 13.5 6H10.5C10.3674 6 10.2402 6.05268 10.1464 6.14645C10.0527 6.24021 10 6.36739 10 6.5ZM13 12C13 12.2652 12.8946 12.5196 12.7071 12.7071C12.5196 12.8946 12.2652 13 12 13C11.7348 13 11.4804 12.8946 11.2929 12.7071C11.1054 12.5196 11 12.2652 11 12C11 11.7348 11.1054 11.4804 11.2929 11.2929C11.4804 11.1054 11.7348 11 12 11C12.2652 11 12.5196 11.1054 12.7071 11.2929C12.8946 11.4804 13 11.7348 13 12ZM14 12C14 12.5304 13.7893 13.0391 13.4142 13.4142C13.0391 13.7893 12.5304 14 12 14C11.4696 14 10.9609 13.7893 10.5858 13.4142C10.2107 13.0391 10 12.5304 10 12C10 11.4696 10.2107 10.9609 10.5858 10.5858C10.9609 10.2107 11.4696 10 12 10C12.5304 10 13.0391 10.2107 13.4142 10.5858C13.7893 10.9609 14 11.4696 14 12Z"
            fill="white"
          />
        </svg>
      ),
    },
    {
      label: "Mouse Enter",
      icon: (
        <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M7.5 6C7.10218 6 6.72064 6.15804 6.43934 6.43934C6.15804 6.72064 6 7.10218 6 7.5V8.5C6 8.63261 6.05268 8.75979 6.14645 8.85355C6.24021 8.94732 6.36739 9 6.5 9C6.63261 9 6.75979 8.94732 6.85355 8.85355C6.94732 8.75979 7 8.63261 7 8.5V7.5C7 7.36739 7.05268 7.24021 7.14645 7.14645C7.24021 7.05268 7.36739 7 7.5 7H16.5C16.6326 7 16.7598 7.05268 16.8536 7.14645C16.9473 7.24021 17 7.36739 17 7.5V16.5C17 16.6326 16.9473 16.7598 16.8536 16.8536C16.7598 16.9473 16.6326 17 16.5 17H7.5C7.36739 17 7.24021 16.9473 7.14645 16.8536C7.05268 16.7598 7 16.6326 7 16.5V15.5C7 15.3674 6.94732 15.2402 6.85355 15.1464C6.75979 15.0527 6.63261 15 6.5 15C6.36739 15 6.24021 15.0527 6.14645 15.1464C6.05268 15.2402 6 15.3674 6 15.5V16.5C6 16.8978 6.15804 17.2794 6.43934 17.5607C6.72064 17.842 7.10218 18 7.5 18H16.5C16.8978 18 17.2794 17.842 17.5607 17.5607C17.842 17.2794 18 16.8978 18 16.5V7.5C18 7.10218 17.842 6.72064 17.5607 6.43934C17.2794 6.15804 16.8978 6 16.5 6H7.5ZM11.646 9.146C11.6924 9.09944 11.7476 9.06249 11.8084 9.03729C11.8691 9.01208 11.9342 8.99911 12 8.99911C12.0658 8.99911 12.1309 9.01208 12.1916 9.03729C12.2524 9.06249 12.3076 9.09944 12.354 9.146L14.854 11.646C14.9006 11.6924 14.9375 11.7476 14.9627 11.8084C14.9879 11.8691 15.0009 11.9342 15.0009 12C15.0009 12.0658 14.9879 12.1309 14.9627 12.1916C14.9375 12.2524 14.9006 12.3076 14.854 12.354L12.354 14.854C12.2601 14.9479 12.1328 15.0006 12 15.0006C11.8672 15.0006 11.7399 14.9479 11.646 14.854C11.5521 14.7601 11.4994 14.6328 11.4994 14.5C11.4994 14.3672 11.5521 14.2399 11.646 14.146L13.293 12.5H9.5C9.36739 12.5 9.24021 12.4473 9.14645 12.3536C9.05268 12.2598 9 12.1326 9 12C9 11.8674 9.05268 11.7402 9.14645 11.6464C9.24021 11.5527 9.36739 11.5 9.5 11.5H13.293L11.646 9.854C11.5994 9.80755 11.5625 9.75238 11.5373 9.69163C11.5121 9.63089 11.4991 9.56577 11.4991 9.5C11.4991 9.43423 11.5121 9.36911 11.5373 9.30837C11.5625 9.24762 11.5994 9.19245 11.646 9.146Z"
            fill="white"
          />
        </svg>
      ),
    },
    {
      label: "Mouse Leave",
      icon: (
        <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M16.5 6C16.8978 6 17.2794 6.15804 17.5607 6.43934C17.842 6.72064 18 7.10218 18 7.5V8.5C18 8.63261 17.9473 8.75979 17.8536 8.85355C17.7598 8.94732 17.6326 9 17.5 9C17.3674 9 17.2402 8.94732 17.1464 8.85355C17.0527 8.75979 17 8.63261 17 8.5V7.5C17 7.36739 16.9473 7.24021 16.8536 7.14645C16.7598 7.05268 16.6326 7 16.5 7H7.5C7.36739 7 7.24021 7.05268 7.14645 7.14645C7.05268 7.24021 7 7.36739 7 7.5V16.5C7 16.6326 7.05268 16.7598 7.14645 16.8536C7.24021 16.9473 7.36739 17 7.5 17H16.5C16.6326 17 16.7598 16.9473 16.8536 16.8536C16.9473 16.7598 17 16.6326 17 16.5V15.5C17 15.3674 17.0527 15.2402 17.1464 15.1464C17.2402 15.0527 17.3674 15 17.5 15C17.6326 15 17.7598 15.0527 17.8536 15.1464C17.9473 15.2402 18 15.3674 18 15.5V16.5C18 16.8978 17.842 17.2794 17.5607 17.5607C17.2794 17.842 16.8978 18 16.5 18H7.5C7.10218 18 6.72064 17.842 6.43934 17.5607C6.15804 17.2794 6 16.8978 6 16.5V7.5C6 7.10218 6.15804 6.72064 6.43934 6.43934C6.72064 6.15804 7.10218 6 7.5 6H16.5ZM11.646 9.146C11.6924 9.09944 11.7476 9.06249 11.8084 9.03729C11.8691 9.01208 11.9342 8.99911 12 8.99911C12.0658 8.99911 12.1309 9.01208 12.1916 9.03729C12.2524 9.06249 12.3076 9.09944 12.354 9.146L14.854 11.646C14.9006 11.6924 14.9375 11.7476 14.9627 11.8084C14.9879 11.8691 15.0009 11.9342 15.0009 12C15.0009 12.0658 14.9879 12.1309 14.9627 12.1916C14.9375 12.2524 14.9006 12.3076 14.854 12.354L12.354 14.854C12.2601 14.9479 12.1328 15.0006 12 15.0006C11.8672 15.0006 11.7399 14.9479 11.646 14.854C11.5521 14.7601 11.4994 14.6328 11.4994 14.5C11.4994 14.3672 11.5521 14.2399 11.646 14.146L13.293 12.5H9.5C9.36739 12.5 9.24021 12.4473 9.14645 12.3536C9.05268 12.2598 9 12.1326 9 12C9 11.8674 9.05268 11.7402 9.14645 11.6464C9.24021 11.5527 9.36739 11.5 9.5 11.5H13.293L11.646 9.854C11.5994 9.80755 11.5625 9.75238 11.5373 9.69163C11.5121 9.63089 11.4991 9.56577 11.4991 9.5C11.4991 9.43423 11.5121 9.36911 11.5373 9.30837C11.5625 9.24762 11.5994 9.19245 11.646 9.146Z"
            fill="white"
          />
        </svg>
      ),
    },
    {
      label: "Mouse Down",
      icon: (
        <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M9.321 5.53199C9.44341 5.4813 9.58093 5.48126 9.70336 5.53189C9.8258 5.58251 9.92314 5.67966 9.974 5.80199L10.751 7.67799C10.853 7.92299 10.711 8.20199 10.466 8.30399C10.221 8.40599 9.929 8.30599 9.827 8.05999L9.05 6.18599C9.02477 6.12527 9.01177 6.06016 9.01174 5.9944C9.01172 5.92864 9.02466 5.86353 9.04983 5.80278C9.075 5.74203 9.11191 5.68684 9.15844 5.64037C9.20497 5.59391 9.26021 5.55708 9.321 5.53199ZM8.061 9.82699L6.186 9.04999C6.06347 8.99921 5.92578 8.99917 5.80323 9.0499C5.68067 9.10063 5.58329 9.19796 5.5325 9.32049C5.48171 9.44302 5.48168 9.58071 5.53241 9.70327C5.58313 9.82582 5.68047 9.9232 5.803 9.97399L7.678 10.751C7.924 10.852 8.202 10.711 8.304 10.466C8.406 10.22 8.307 9.92999 8.061 9.82699ZM16.321 10.75L18.196 9.97299C18.3185 9.9222 18.4159 9.82482 18.4666 9.70227C18.5173 9.57971 18.5173 9.44202 18.4665 9.31949C18.4157 9.19696 18.3183 9.09963 18.1958 9.0489C18.0732 8.99817 17.9355 8.9982 17.813 9.04899L15.939 9.82599C15.693 9.92699 15.593 10.219 15.695 10.465C15.797 10.711 16.075 10.851 16.322 10.75M14.173 8.05999L14.95 6.18499C14.9751 6.12432 14.9881 6.05929 14.9881 5.99362C14.9881 5.92794 14.9752 5.8629 14.9501 5.80222C14.925 5.74154 14.8882 5.6864 14.8417 5.63995C14.7953 5.59349 14.7402 5.55664 14.6795 5.53149C14.6188 5.50635 14.5538 5.49339 14.4881 5.49338C14.4224 5.49336 14.3574 5.50628 14.2967 5.5314C14.236 5.55652 14.1809 5.59334 14.1345 5.63977C14.088 5.6862 14.0511 5.74132 14.026 5.80199L13.25 7.67699C13.148 7.92199 13.289 8.20099 13.534 8.30299C13.78 8.40499 14.072 8.30499 14.174 8.05899M14.856 13.352C14.9499 13.2581 15.0026 13.1308 15.0026 12.998C15.0026 12.8652 14.9499 12.7379 14.856 12.644C14.7621 12.5501 14.6348 12.4974 14.502 12.4974C14.3692 12.4974 14.2419 12.5501 14.148 12.644L12.5 14.293V10.5C12.5 10.3674 12.4473 10.2402 12.3536 10.1464C12.2598 10.0527 12.1326 9.99999 12 9.99999C11.8674 9.99999 11.7402 10.0527 11.6464 10.1464C11.5527 10.2402 11.5 10.3674 11.5 10.5V14.293L9.854 12.646C9.76011 12.5521 9.63278 12.4994 9.5 12.4994C9.36722 12.4994 9.23989 12.5521 9.146 12.646C9.05211 12.7399 8.99937 12.8672 8.99937 13C8.99937 13.1328 9.05211 13.2601 9.146 13.354L11.646 15.854C11.6924 15.9006 11.7476 15.9375 11.8084 15.9627C11.8691 15.9879 11.9342 16.0009 12 16.0009C12.0658 16.0009 12.1309 15.9879 12.1916 15.9627C12.2524 15.9375 12.3076 15.9006 12.354 15.854L14.856 13.352ZM16.562 13.684C16.284 13.586 16.002 13.805 15.957 14.097C15.9388 14.2115 15.961 14.3288 16.0197 14.4287C16.0785 14.5287 16.1701 14.6052 16.279 14.645L16.419 14.697C16.973 14.91 17.388 15.152 17.655 15.395C17.922 15.638 18 15.844 18 16C18 16.156 17.92 16.36 17.653 16.603C17.386 16.846 16.971 17.088 16.417 17.301C15.31 17.726 13.75 18 12 18C10.25 18 8.689 17.726 7.583 17.3C7.029 17.088 6.614 16.846 6.347 16.603C6.08 16.36 6 16.156 6 16C6 15.844 6.08 15.64 6.347 15.397C6.614 15.154 7.029 14.912 7.583 14.699L7.723 14.647C7.83189 14.6072 7.92354 14.5307 7.98228 14.4307C8.04102 14.3308 8.06319 14.2135 8.045 14.099C8.001 13.807 7.718 13.588 7.44 13.686L7.224 13.766C6.603 14.005 6.065 14.302 5.674 14.656C5.284 15.012 5 15.466 5 16C5 16.534 5.284 16.987 5.674 17.343C6.065 17.698 6.603 17.995 7.224 18.234C8.471 18.714 10.16 19 12 19C13.84 19 15.529 18.714 16.776 18.234C17.397 17.995 17.935 17.698 18.326 17.343C18.716 16.987 19 16.534 19 16C19 15.465 18.716 15.012 18.326 14.657C17.936 14.302 17.397 14.005 16.776 13.765L16.562 13.684Z"
            fill="white"
          />
        </svg>
      ),
    },
    {
      label: "Mouse Up",
      icon: (
        <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M9.321 5.53199C9.44341 5.4813 9.58093 5.48126 9.70336 5.53189C9.8258 5.58251 9.92314 5.67966 9.974 5.80199L10.751 7.67799C10.853 7.92299 10.711 8.20199 10.466 8.30399C10.221 8.40599 9.929 8.30599 9.827 8.05999L9.05 6.18599C9.02477 6.12527 9.01177 6.06016 9.01174 5.9944C9.01172 5.92864 9.02466 5.86353 9.04983 5.80278C9.075 5.74203 9.11191 5.68684 9.15844 5.64037C9.20497 5.59391 9.26021 5.55708 9.321 5.53199ZM8.061 9.82699L6.186 9.04999C6.06347 8.99921 5.92578 8.99917 5.80323 9.0499C5.68067 9.10063 5.58329 9.19796 5.5325 9.32049C5.48171 9.44302 5.48168 9.58071 5.53241 9.70327C5.58313 9.82582 5.68047 9.9232 5.803 9.97399L7.678 10.751C7.924 10.852 8.202 10.711 8.304 10.466C8.406 10.22 8.307 9.92999 8.061 9.82699ZM16.321 10.75L18.196 9.97299C18.3185 9.9222 18.4159 9.82482 18.4666 9.70227C18.5173 9.57971 18.5173 9.44202 18.4665 9.31949C18.4157 9.19696 18.3183 9.09963 18.1958 9.0489C18.0732 8.99817 17.9355 8.9982 17.813 9.04899L15.939 9.82599C15.693 9.92699 15.593 10.219 15.695 10.465C15.797 10.711 16.075 10.851 16.322 10.75M14.173 8.05999L14.95 6.18499C14.9751 6.12432 14.9881 6.05929 14.9881 5.99362C14.9881 5.92794 14.9752 5.8629 14.9501 5.80222C14.925 5.74154 14.8882 5.6864 14.8417 5.63995C14.7953 5.59349 14.7402 5.55664 14.6795 5.53149C14.6188 5.50635 14.5538 5.49339 14.4881 5.49338C14.4224 5.49336 14.3574 5.50628 14.2967 5.5314C14.236 5.55652 14.1809 5.59334 14.1345 5.63977C14.088 5.6862 14.0511 5.74132 14.026 5.80199L13.25 7.67699C13.148 7.92199 13.289 8.20099 13.534 8.30299C13.78 8.40499 14.072 8.30499 14.174 8.05899M9.148 12.644C9.05411 12.7377 9.00132 12.865 9.00122 12.9976C9.00113 13.1303 9.05375 13.2576 9.1475 13.3515C9.24125 13.4454 9.36846 13.4982 9.50115 13.4983C9.63383 13.4984 9.76111 13.4457 9.855 13.352L11.502 11.705V15.5C11.502 15.6326 11.5547 15.7598 11.6484 15.8535C11.7422 15.9473 11.8694 16 12.002 16C12.1346 16 12.2618 15.9473 12.3556 15.8535C12.4493 15.7598 12.502 15.6326 12.502 15.5V11.707L14.148 13.354C14.2419 13.4477 14.3692 13.5004 14.5019 13.5003C14.6345 13.5002 14.7617 13.4474 14.8555 13.3535C14.9493 13.2596 15.0019 13.1323 15.0018 12.9996C15.0017 12.867 14.9489 12.7397 14.855 12.646L12.355 10.146C12.2612 10.0523 12.1341 9.9996 12.0015 9.9996C11.8689 9.9996 11.7418 10.0523 11.648 10.146L9.148 12.644ZM16.562 13.684C16.284 13.586 16.002 13.805 15.957 14.097C15.9388 14.2115 15.961 14.3288 16.0197 14.4287C16.0785 14.5287 16.1701 14.6052 16.279 14.645L16.419 14.697C16.973 14.91 17.388 15.152 17.655 15.395C17.922 15.638 18 15.844 18 16C18 16.156 17.92 16.36 17.653 16.603C17.386 16.846 16.971 17.088 16.417 17.301C15.31 17.726 13.75 18 12 18C10.25 18 8.689 17.726 7.583 17.3C7.029 17.088 6.614 16.846 6.347 16.603C6.08 16.36 6 16.156 6 16C6 15.844 6.08 15.64 6.347 15.397C6.614 15.154 7.029 14.912 7.583 14.699L7.723 14.647C7.83189 14.6072 7.92354 14.5307 7.98228 14.4307C8.04102 14.3308 8.06319 14.2135 8.045 14.099C8.001 13.807 7.718 13.588 7.44 13.686L7.224 13.766C6.603 14.005 6.065 14.302 5.674 14.656C5.284 15.012 5 15.466 5 16C5 16.534 5.284 16.987 5.674 17.343C6.065 17.698 6.603 17.995 7.224 18.234C8.471 18.714 10.16 19 12 19C13.84 19 15.529 18.714 16.776 18.234C17.397 17.995 17.935 17.698 18.326 17.343C18.716 16.987 19 16.534 19 16C19 15.465 18.716 15.012 18.326 14.657C17.936 14.302 17.397 14.005 16.776 13.765L16.562 13.684Z"
            fill="white"
          />
        </svg>
      ),
    },
    {
      label: "Delay",
      icon: (
        <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M12 5C11.8674 5 11.7402 5.05268 11.6464 5.14645C11.5527 5.24021 11.5 5.36739 11.5 5.5C11.5 5.63261 11.5527 5.75979 11.6464 5.85355C11.7402 5.94732 11.8674 6 12 6C13.1867 6 14.3467 6.35189 15.3334 7.01118C16.3201 7.67047 17.0892 8.60754 17.5433 9.7039C17.9974 10.8003 18.1162 12.0067 17.8847 13.1705C17.6532 14.3344 17.0818 15.4035 16.2426 16.2426C15.4035 17.0818 14.3344 17.6532 13.1705 17.8847C12.0067 18.1162 10.8003 17.9974 9.7039 17.5433C8.60754 17.0892 7.67047 16.3201 7.01118 15.3334C6.35189 14.3467 6 13.1867 6 12C6 11.8674 5.94732 11.7402 5.85355 11.6464C5.75979 11.5527 5.63261 11.5 5.5 11.5C5.36739 11.5 5.24021 11.5527 5.14645 11.6464C5.05268 11.7402 5 11.8674 5 12C5 13.3845 5.41054 14.7378 6.17971 15.889C6.94888 17.0401 8.04213 17.9373 9.32122 18.4672C10.6003 18.997 12.0078 19.1356 13.3656 18.8655C14.7235 18.5954 15.9708 17.9287 16.9497 16.9497C17.9287 15.9708 18.5954 14.7235 18.8655 13.3656C19.1356 12.0078 18.997 10.6003 18.4672 9.32122C17.9373 8.04213 17.0401 6.94888 15.889 6.17971C14.7378 5.41054 13.3845 5 12 5ZM8.3 6.918C8.10793 6.79502 7.8796 6.74138 7.65286 6.76599C7.42612 6.7906 7.21461 6.89198 7.0534 7.0533C6.89219 7.21463 6.79097 7.42622 6.76653 7.65297C6.74208 7.87972 6.79588 8.10802 6.919 8.3L9.993 13.05C10.172 13.3274 10.4109 13.5613 10.692 13.7344C10.9731 13.9075 11.2895 14.0155 11.6178 14.0505C11.9461 14.0856 12.2781 14.0467 12.5894 13.9367C12.9007 13.8268 13.1835 13.6485 13.417 13.4151C13.6505 13.1817 13.8288 12.899 13.9389 12.5877C14.0489 12.2764 14.0879 11.9444 14.053 11.6161C14.0181 11.2878 13.9102 10.9714 13.7372 10.6902C13.5641 10.409 13.3304 10.1701 13.053 9.991L8.3 6.918ZM12.508 10.832L9.806 9.083L7.757 7.757L9.083 9.807L10.832 12.508C10.9299 12.6605 11.0607 12.7892 11.2149 12.8845C11.369 12.9799 11.5426 13.0394 11.7228 13.0589C11.903 13.0783 12.0853 13.0571 12.2562 12.9968C12.4272 12.9366 12.5824 12.8388 12.7106 12.7106C12.8388 12.5824 12.9366 12.4272 12.9968 12.2562C13.0571 12.0853 13.0783 11.903 13.0589 11.7228C13.0394 11.5426 12.9799 11.369 12.8845 11.2149C12.7892 11.0607 12.6605 10.9299 12.508 10.832Z"
            fill="white"
          />
        </svg>
      ),
    },
  ];

  const handleCurveSelection = (curve: Curve) => {
    console.log("Curve selected:", curve);
    setSelectedCurve(curve);
  };

  const handleDurationChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setDuration(Number(e.target.value));
  };

  // Handle trigger selection
  const handleTriggerSelection = useCallback((trigger: string) => {
    setSelectedTrigger(trigger);
    console.log("Selected trigger:", trigger); // Debug log
  }, []);

  // Handle frame switching
  const handleSwitchFrames = () => {
    parent.postMessage({ pluginMessage: { type: "switch-frames" } }, "*");
  };

  // Handle interaction creation
  const handleCreateInteraction = () => {
    parent.postMessage(
      {
        pluginMessage: {
          type: "create-interaction",
          trigger: selectedTrigger,
          curve: selectedCurve,
          duration: duration,
        },
      },
      "*",
    );
  };

  const getAnimationProps = (curve: Curve) => {
    if (curve.type === "spring") {
      return {
        type: "spring",
        stiffness: curve.stiffness,
        damping: curve.damping,
        mass: curve.mass,
      };
    } else {
      return {
        type: "tween",
        ease: `cubic-bezier(${curve.values.join(",")})`,
      };
    }
  };

  // Listen for messages from the plugin
  useEffect(() => {
    const onMessage = (event: MessageEvent) => {
      const msg = event.data.pluginMessage;
      if (msg.type === "update-frames") {
        if (msg.startFrameId && msg.endFrameId) {
          setStartFrameData({
            src: msg.startFrameId,
            name: msg.startFrameName,
          });
          setEndFrameData({
            src: msg.endFrameId,
            name: msg.endFrameName,
          });
          setIsCreateButtonDisabled(false);
        } else {
          setStartFrameData({ src: null, name: "" });
          setEndFrameData({ src: null, name: "" });
          setIsCreateButtonDisabled(true);
        }
      }
    };

    window.addEventListener("message", onMessage);

    // Cleanup listener on component unmount
    return () => {
      window.removeEventListener("message", onMessage);
    };
  }, []);

  return (
    <div className="font-sans m-0 p-4 bg-[#2c2c2c] text-white mx-auto flex flex-col gap-4">
      {/* <Tabs.Root defaultValue="custom">
        <Tabs.List>
          <Tabs.Trigger value="preset">Preset</Tabs.Trigger>
          <Tabs.Trigger value="custom">Custom</Tabs.Trigger>
        </Tabs.List>
        <Tabs.Content value="preset">
          <Text>Presets</Text>
        </Tabs.Content>
        <Tabs.Content value="custom">
          <Text>Custom</Text>
        </Tabs.Content>
      </Tabs.Root> */}

      {/* Frames Section */}
      <div className="container bg-red p-2 gap-2">
        {/* <h2 className="text-sm font-medium mb-2 text-neutral-500">Select 2 Frames</h2> */}
        <Text size={"large"} className="">
          Hello
        </Text>

        <div className="flex items-stretch justify-between gap-2">
          {/* Start Frame */}
          <div className="flex-1 flex flex-col items-center">
            <div className="w-full h-[120px] bg-[#3C3C3C] rounded-lg overflow-hidden flex items-center justify-center">
              {startFrameData.src ? (
                <img src={startFrameData.src} alt="Start Frame" className="w-full h-full object-cover" />
              ) : (
                <span className="text-neutral-500 text-sm">Frame 1</span>
              )}
            </div>
          </div>

          {/* Switch Button */}
          <div className="flex items-center">
            <motion.button
              onClick={handleSwitchFrames}
              className="bg-[#3C3C3C] rounded-md w-10 h-10 flex justify-center items-center text-white"
              whileHover={{ backgroundColor: "#4C4C4C" }}
              whileTap={{ scale: 0.95 }}
            >
              <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path
                  d="M5.83331 14.1667L3.33331 11.6667M3.33331 11.6667L5.83331 9.16675M3.33331 11.6667H16.6666M14.1666 5.83341L16.6666 8.33341M16.6666 8.33341L14.1666 10.8334M16.6666 8.33341H3.33331"
                  stroke="white"
                  strokeWidth="1.5"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                />
              </svg>
            </motion.button>
          </div>

          {/* End Frame */}
          <div className="flex-1 flex flex-col items-center">
            <div className="w-full h-[120px] bg-[#3C3C3C] rounded-lg overflow-hidden flex items-center justify-center">
              {endFrameData.src ? (
                <img src={endFrameData.src} alt="End Frame" className="w-full h-full object-cover" />
              ) : (
                <span className="text-neutral-500 text-sm">Frame 2</span>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Trigger Section */}

      <div className="mb-4">
        <div className="flex flex-row gap-1">
          <h2 className="text-sm font-medium mb-2 text-neutral-500">Choose your trigger:</h2>
          <h1 className="text-sm font-semibold mb-2 text-neutral-200">{selectedTrigger}</h1>
        </div>
        <div className="grid grid-cols-5 gap-2">
          {triggerOptions.map((option) => (
            <motion.button
              key={`${option.label}-${selectedTrigger === option.label}`}
              onClick={() => handleTriggerSelection(option.label)}
              className={`rounded-lg p-4 flex flex-col justify-center items-center text-white text-xs ${
                selectedTrigger === option.label ? "bg-[#0D99FF]" : "bg-[#3C3C3C]"
              }`}
              whileHover={{ backgroundColor: "#1EA0FF" }}
              whileTap={{ scale: 0.95 }}
            >
              <div className="w-6 h-6">{option.icon}</div>
              {/* {option.label.length > 6 ? option.label.slice(0, 6) : option.label} */}
            </motion.button>
          ))}
        </div>
      </div>

      {/* Curve Selection Section */}
      <div className="mb-4">
        <div className="flex justify-between items-center mb-2">
          <h2 className="text-sm font-medium text-neutral-500">Select your curve</h2>
          <div className="bg-[#3C3C3C] rounded px-2 py-1 text-sm">{duration}ms</div>
        </div>
        <div className="flex gap-4">
          <div className="flex-1">
            {curves.map((curve) => {
              const isSelected = selectedCurve.name === curve.name;
              console.log(`Rendering curve ${curve.name}, isSelected: ${isSelected}`);
              return (
                <motion.button
                  key={curve.name}
                  onClick={() => handleCurveSelection(curve)}
                  className={`w-full mb-2 p-3 rounded-lg flex justify-between items-center ${
                    isSelected ? "bg-[#0D99FF]" : "bg-[#3C3C3C]"
                  }`}
                  whileHover={{ backgroundColor: "#0D99FF" }}
                  whileTap={{ scale: 0.95 }}
                >
                  <span>{curve.name}</span>
                  <span className="text-xs text-neutral-500">{curve.type}</span>
                </motion.button>
              );
            })}
          </div>
          <div className="flex-1 h-[200px]">
            <AnimationPreview selectedCurve={selectedCurve} duration={duration} />
          </div>
        </div>
        <div className="bg-[#3C3C3C] p-3 rounded-md flex flex-col mt-4">
          <span className="text-xs text-neutral-500">
            {selectedCurve.type === "spring" ? "Spring Values" : "Bezier Values"}
          </span>
          <span className="text-sm">
            {selectedCurve.type === "spring"
              ? `Stiffness: ${selectedCurve.stiffness}, Damping: ${selectedCurve.damping}, Mass: ${selectedCurve.mass}`
              : selectedCurve.values.join(", ")}
          </span>
        </div>
        <input
          type="range"
          min="100"
          max="1000"
          step="10"
          value={duration}
          onChange={handleDurationChange}
          className="w-full mt-4"
          aria-label="Animation duration"
        />
      </div>

      {/* Create Interaction Button */}
      <motion.button
        onClick={handleCreateInteraction}
        disabled={isCreateButtonDisabled}
        className={`rounded-md p-3 text-base font-bold w-full text-white ${
          isCreateButtonDisabled ? "bg-[#4C4C4C] cursor-not-allowed" : "bg-[#0D99FF]"
        }`}
        whileHover={!isCreateButtonDisabled ? { backgroundColor: "#0B87E0" } : {}}
        whileTap={!isCreateButtonDisabled ? { scale: 0.98 } : {}}
      >
        Create Interaction
      </motion.button>
    </div>
  );
};

const container = document.getElementById("root")!;
const root = createRoot(container);
root.render(<App />);
